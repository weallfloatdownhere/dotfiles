# Unix
export ALIASES_URL="https://raw.githubusercontent.com/weallfloatdownhere/dotfiles/main/aliases/bash_aliases"

if [ -x "$(command -v curl)" ]; then alias curl='curl -L --silent'; fi

if [ ! -d "$HOME/.local/bin" ]; then mkdir -p "$HOME/.local/bin"; fi
if [ ! -f "$HOME/.local/bin/ch" ]; then curl https://cht.sh/:cht.sh > "$HOME/.local/bin/ch"; fi
if [ ! -f "$HOME/.local/bin/todo" ]; then curl https://raw.githubusercontent.com/alexanderepstein/Bash-Snippets/master/todo/todo > "$HOME/.local/bin/todo"; fi
if [ ! -f "$HOME/.local/bin/crypt" ]; then curl https://raw.githubusercontent.com/alexanderepstein/Bash-Snippets/master/crypt/crypt > "$HOME/.local/bin/crypt"; fi

# Aliases management
alias ra="rm -rf ~/.aliases && curl -H 'Cache-Control: no-cache, no-store' -L --silent $ALIASES_URL -o ~/.aliases && source ~/.aliases"
alias sa='source ~/.aliases'
alias oa="vi ~/.aliases"
alias rasa="curl -L --silent $ALIASES_URL -o ~/.aliases && source ~/.aliases"
alias sra='cat ~/.aliases | grep -i'

# Static installers
alias install.kubens='curl https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens -o ~/.local/bin/kubens'
alias install.kubectx='curl https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx -o ~/.local/bin/kubectx'
alias install.helm='curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash'
alias install.kustomize='curl "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash'
alias install.kubectl='curl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" -o  ~/.local/bin/kubectl'
alias install.kubeseal='curl https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.10.0/kubeseal-linux-amd64 -o ~/.local/bin/kubeseal && install -m 755 ~/.local/bin/kubeseal ~/.local/bin/kubeseal'
alias install.kube-slice='curl https://github.com/patrickdappollonio/kubectl-slice/releases/download/v1.2.3/kubectl-slice_1.2.3_linux_x86_64.tar.gz | tar -C ~/.local/bin -xzv'
alias install.argoctl='curl https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o ~/.local/bin/argocd'
alias install.kind='curl https://github.com/kubernetes-sigs/kind/releases/download/v0.14.0/kind-linux-amd64 -o ~/.local/bin/kind'

# Bash
# ----------------------------------------------------------------------------------------------------------
# History
alias h='history'
alias hgi='history | grep -i'

# Permissions
# Grant execution right to all .sh files inside the current directory recursively
alias cx='chmod +x'
alias rexec='find . -type f -iname "*.sh" -exec chmod +x {} \;'
alias cown='sudo chown -R $USER:USER'
# Dos2unix recursive
alias d2u='find . -type f -print0 | xargs -0 dos2unix'

# Mkdir
alias mkdir="mkdir -p"

# System infos
# Print all hostnames
alias hostname='hostname -A'

# cd
alias des='cd ~/Desktop'
alias clrtmp='(rm -rf /tmp/* || true) && echo "TEMPORARY DIRECTORY CLEANED SUCCESSFULLY."'
alias ctmp='cd $(mktemp -d)'

# ls commands
alias ls="ls --color"
alias ll="ls -l"
alias ln="ln -v"
alias l='ls -l'
alias la='ls'
alias lla='ls -l'
alias lt='ls --tree'
alias ip='ip -c'

# Greps
alias gi='grep -i'

# rm commands
alias rm='rm -i'
alias rmm="rm -rf"

# Python3
alias p3='python3'
alias ppp='python3'

# Generating stuff
function gen.secret {
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ]; then
  echo "Usage: gen.secret {type} {priv_path} {cert_path} {secret_name} {namespace}"
  echo "valid types are: tls"
  echo "Example: gen.secret tls priv.key cert.crt secret-tls-cert default"
else
  if test ! -f "$2"; then echo "Cant find the specified private key." && return 1; fi
  if test ! -f "$3"; then echo "Cant find the specified certificate." && return 1; fi
  kubectl --dry-run=client -o yaml --namespace "$5" create secret tls "$4" --cert="$3" --key="$2" | tee "./$4.yaml"
fi
}

# Downloads
function dwnext {
if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Download and extract an tar.gz archive."
  echo "Usage: dwnext {URL}.tar.gz {DESTINATION}"
else
  mkdir -p "$2"
  curl -L "$1" | tar zxv -C "$2"
fi
}

# GIT ##################################################################################################################
function git.getlatest {
if [ -z "$1" ]; then
  echo "Get the latest version of a github project in a string format by specifying the repo owner and the repo name."
  echo "Usage: ggl username/reponame"
else
  echo $(curl -L -s "https://api.github.com/repos/$1/releases/latest" | grep -Poe '"tag_name": "\K.*?(?=")' | head -n 1)
fi
}
alias cg='cd `git rev-parse --show-toplevel`'
alias gst='git status'
alias gitremote='git config --get remote.origin.url'
alias gsr='cd `git rev-parse --show-toplevel` && git checkout master && git pull'
########################################################################################################################

# Ansible
alias ansiblefacts='ansible localhost -m ansible.builtin.setup'

# Encryptions
alias crypt.gitcrypt='git-crypt status -e'
alias crypt.certToPem="openssl x509 -inform der -in ca.cer -out ca.pem"; 
function crypt.bcryptPassword {
if [ -z "$1" ]; then
  echo "Encrypting a string using htpasswd Bcrypt."
  echo "Usage: crypt.bcryptPassword [STRING]"
else
  echo -n htpasswd -bnBC 10 \"\" $1 | tr -d ":\n"
fi
}

# navi
alias navi="navi --fzf-overrides '--layout=reverse --with-nth 1,2 --border=rounded --margin 5% --padding 3%'"

# kitty
alias icat="kitty +kitten icat"

# Ranger
if [ -x "$(command -v ranger)" ]; then alias r='ranger .'; fi

# Minikube
if [ -x "$(command -v minikube)" ]; then alias minikuberestart="minikube delete && minikube start"; fi

# Open atom in the current directory
if [ -x "$(command -v atom)" ]; then alias a='atom .'; fi

# peek recorder
if [ -x "$(command -v peek)" ]; then alias peek='peek --display=$DISPLAY &'; fi



if command -v xclip &> /dev/null
then
alias caty='xclip -sel c <' # copy cotent of the file in clipboard, ex : caty input.txt
fi

# Mullvad
alias vpn='sudo openvpn --config'
alias gpvpn='gp-saml-gui --clientos Windows --gateway --no-verify'

# Knowledge base
alias kbl="kb list"
alias kbe="kb edit"
alias kba="kb add"
alias kbv="kb view"
alias kbd="kb delete --id"
alias kbg="kb grep"
alias kbt="kb list --tags"

# Vagrant
alias va='vagrant'
alias vadf='vagrant destroy -f'
alias vau='vagrant up'
alias vaup='vagrant up --provision'

# Docker
alias dr='docker run -it '
alias dok='docker'
alias dokb='docker build'
alias dokr='docker run'
alias doklia='docker image ls --all'
alias dormi='docker rmi -f $(docker images -a -q)'
alias dormc='docker rm -vf $(docker ps -a -q)'
alias dora='docker system prune -f || true && docker rm -vf $(docker ps -a -q) || true && docker rmi -f $(docker images -a -q) || true &&  docker system prune -f || true'
alias dokube='docker run -it -v "$(pwd)/:/root/rke/" silentreatmen7/dock-kube:latest'

# Terminal
alias rxvt-unicode='urxvt'

# Tmux
alias tm='tmux'

# FluxCD2
alias frh='flux reconcile helmrelease'
alias frs='flux reconcile source'
alias frk='flux reconcile kustomization'
alias frall='flux reconcile source git flux-system && flux reconcile kustomization flux-system applications core --with-source'
alias fgall='flux get all'
alias flog='flux logs'

# Helm
alias helmdry='helm install --generate-name --dry-run --debug --values'
function helm.mktemplates {
if [ -z "$1" ] || [ -z "$1" ] || [ -z "$1" ]; then
  echo "Generate kustomize resources from a HelmChart base directory."
  echo "Usage: helm.mktemplates {values_file} {output_dir} {namespace} {releaseName} {chart_path}"
  echo "Example: helm.mktemplates values.yml output/ default myapp custom/charts/myapp"
else
  helm template --values "$1" --output-dir "$2" --namespace "$3" --include-crds --release-name "$4" "$5"
fi

}

# Kustomize
alias kz='kustomize'
alias kzc='kustomize create --autodetect'
alias kzcr='kustomize create --autodetect --recursive'
alias kzb='kustomize build --enable-helm --enable-alpha-plugins --load-restrictor=LoadRestrictionsNone'

# Kubectl
alias kkk='kubectl config view --minify'
alias kwatch='watch kubectl get pods -A'
alias kns='kubens'
alias k='kubectl'
alias kconf='export KUBECONFIG=$(pwd)/kube_config_cluster.yml'
alias kclrconf='rm -rf $HOME/.kube && mkdir $HOME/.kube && cp $(pwd)/kube_config_cluster.yml $HOME/.kube/config && export KUBECONFIG=$HOME/.kube/config'
alias kconfall='export KUBECONFIG= && for kubeconfigFile in `find "$(pwd)" -type f -name "*.yaml" -o -name "kube*config*"` do; export KUBECONFIG="$kubeconfigFile:$KUBECONFIG" done;'
alias kconfi='mkdir $HOME/.kube && cp $(pwd)/kube_config_cluster.yml $HOME/.kube/config --backup=t && export KUBECONFIG=$HOME/.kube/config'
alias kgsf='kubectl get -o wide statefulset'
alias kclinfo='kubectl cluster-info'
alias kclview='kubectl config view'
alias kcldebug='kubectl cluster-info dump'
alias kgseaa='kubectl get serviceaccount -A'
alias kgsea='kubectl get serviceaccount -A'
alias kdseaa='kubectl describe serviceaccount -A'
alias kdsea='kubectl describe serviceaccount'
alias kdelaps='kubectl delete applicationset'
alias kdaps='kubectl describe applicationset'
alias kdapsa='kubectl describe applicationset -A'
alias kgaps='kubectl get applicationset'
alias kgapsa='kubectl get applicationset -A'
alias kgdep='kubectl get deploy'
alias kddep='kubectl describe deploy'
alias kdepa='kubectl describe deploy -A'
alias kgdepa='kubectl get deploy -A'
alias kdeldep='kubectl delete deploy'
alias kgapp='kubectl get application'
alias kdapp='kubectl describe application'
alias kdappa='kubectl describe application -A'
alias kgappa='kubectl get application -A'
alias kdelapp='kubectl delete application'
alias kdry='kubectl --dry-run=client -o yaml'
alias kgsec='kubectl get -o wide secret'
alias kgseca='kubectl get -o wide secret -A'
alias kgs='kubectl get -o wide service'
alias kgsc='kubectl get -o wide storageclass'
alias kgea='kubectl get -o wide events -A'
alias kgeall='kubectl get -o wide events -A'
alias kge='kubectl get -o wide events'
alias kgpva='kubectl get -o wide pv -A'
alias kgpvca='kubectl get -o wide pvc -A'
alias kgsca='kubectl get -o wide storageclass -A'
alias kgss='kubectl get -o wide sealedsecret -A'
alias kdss='kubectl describe sealedsecret -A'
alias kggr='kubectl get -o wide gitrepository -A'
alias kdgr='kubectl describe gitrepository -A'
alias kghc='kubectl get -o wide helmcharts -A'
alias kdhc='kubectl describe helmcharts -A'
alias kghrl='kubectl get -o wide helmrelease -A'
alias kdhrl='kubectl describe helmrelease -A'
alias kghr='kubectl get -o wide helmrepository -A'
alias kdhr='kubectl describe helmrepository -A'
alias kgir='kubectl get -o wide imagerepository -A'
alias kdir='kubectl describe imagerepository -A'
alias kdel='kubectl delete'
alias kdia='kubectl describe ingress -A'
alias kginr='kubectl get -o wide ingressroute -A'
alias kdinr='kubectl describe ingressroute -A'
alias kgic='kubectl get -o wide ingressclass -A'
alias kdic='kubectl describe ingressclass -A'
alias kdelp='kubectl delete pod'
alias kdelns='kubectl delete namespace'
alias kdelsf='kubectl delete statefulset'
alias kgpa='kubectl get pod -o wide -A'
alias kgsa='kubectl get -o wide service -A'
alias kgnsa='kubectl get -o wide ns -A'
alias kgdep='kubectl get -o wide deploy'
alias kgda='kubectl get -o wide deploy -A'
alias kgia='kubectl get -o wide ingress -A'
alias kgca='kubectl get -o wide cert -A'
alias kdp='kubectl describe pods'
alias kdsf='kubectl describe statefulset'
alias kdd='kubectl describe deploy'
alias kds='kubectl describe service'
alias kdsa='kubectl describe service -A'
alias kdns='kubectl describe namespace'
alias kdi='kubectl describe ingress'
alias kx='kubectx'
alias kkr='kubectl krew'
alias ksys='kubectl --namespace=kube-system'
alias kin='kubectl ingress-nginx'
alias kga='kubectl get -o wide all'
alias kgall='kubectl get -o wide all -A'
alias kak='kubectl apply -k'
alias kps='kubectl patch svc'
alias kk='kubectl kustomize'
alias kdeldep='kubectl delete deployment'
alias kex='kubectl exec -i -t'
alias kl='kubectl logs'
alias klop='kubectl logs -f -p'
alias kp='kubectl proxy'
alias kpf='kubectl port-forward'
alias kpfargo='echo "go at: http://127.0.0.1:8080" && kubectl port-forward -n argocd svc/argocd-server 8080:80'
alias kpfargocd='echo "go at: http://127.0.0.1:8080" && kubectl port-forward -n argocd svc/argo-cd-argocd-server 8080:80'
alias kg='kubectl get -o wide'
alias kd='kubectl describe'
alias krm='kubectl delete'
alias kgpo='kubectl get -o wide pods'
alias kdpo='kubectl describe pods'
alias kgno='kubectl get -o wide nodes'
alias kgna='kubectl get -o wide nodes -A'
alias kdno='kubectl describe nodes'
alias kdnoa='kubectl describe nodes -A'
alias kgns='kubectl get -o wide namespaces'
alias kdns='kubectl describe namespaces'
alias kglb='kubectl get -o wide --show-labels'
alias kwnsa='kubectl get -o wide --all-namespaces --watch'
alias kexn='kubectl exec -i -t --namespace'
alias klon='kubectl logs -f --namespace'
alias kpfn='kubectl port-forward --namespace'
alias kgn='kubectl get -o wide --namespace'
alias kdn='kubectl describe --namespace'
alias kgsecn='kubectl get -o wide secret --namespace'
alias kdsecn='kubectl describe secret --namespace'
alias kall='kubectl get -o wide -o=wide -A'
alias kw='kubectl get -o wide --watch --namespace'
alias knot='kubectl node top'
alias kdu='kubectl describe user'
alias kdua='kubectl describe user -A'
alias kgu='kubectl get -o wide user'
alias kdvo='kubectl describe vhost'
alias kgvo='kubectl get -o wide vhost'
alias kgvoa='kubectl get -o wide vhost -A'
alias kgperm='kubectl get -o wide Permission'
alias kgperma='kubectl get -o wide Permission -A'
alias kgnp='kubectl get -o wide NetworkPolicy'
alias kgnpa='kubectl get -o wide NetworkPolicy -A'
alias kgpol='kubectl get -o wide Policy'
alias kdpol='kubectl describe Policy'
alias kdpola='kubectl describe Policy -A'
alias kgpola='kubectl get -o wide Policy -A'
alias kdvoa='kubectl describe vhost -A'
alias kgpv='kubectl get -o wide pv'
alias kgpva='kubectl get -o wide pv -A'
alias kgpvc='kubectl get -o wide pvc'
alias kgpvca='kubectl get -o wide pvc -A'
alias kdpvc='kubectl describe pvc'
alias kdpvca='kubectl describe pvc -A'
alias kgua='kubectl get -o wide user -A'
alias kgep='kubectl get -o wide endpoints'
alias kgepa='kubectl get -o wide endpoints -A'
alias kdep='kubectl describe endpoints'
alias kdepa='kubectl describe endpoints -A'
alias kgser='kubectl get -o wide service'
alias kgsera='kubectl get -o wide service -A'
alias kdser='kubectl describe service'
alias kdsera='kubectl describe service -A'
alias kdc='kubectl describe cert'
alias kdca='kubectl describe cert -A'
alias kgcm='kubectl get -o wide configmap'
alias kgcma='kubectl get -o wide configmap -A'
alias kdcm='kubectl describe configmap'
alias kdcma='kubectl describe configmap -A'
alias kgcia='kubectl get -o wide ClusterIssuer -A'
alias kgci='kubectl get -o wide ClusterIssuer'
alias kdcia='kubectl describe ClusterIssuer -A'
alias kdci='kubectl describe ClusterIssuer'
alias kgexa='kubectl get -o wide exchange -A'
alias kgex='kubectl get -o wide exchange'
alias kdexa='kubectl describe exchange -A'
alias kdex='kubectl describe exchange'
alias kgcc='kubectl config current-context'

if [ -d ~/.local/bin ]; then chmod +x ~/.local/bin/*; fi
