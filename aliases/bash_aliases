# Unix

# Aliases shortcuts
alias ra="curl -L --silent $ALIASES_URL -o ~/.aliases"
alias sa='source ~/.aliases'
alias oa="vi ~/.aliases"
alias rasa="curl -L --silent $ALIASES_URL -o ~/.aliases && source ~/.aliases"
alias sra='cat ~/.aliases | grep -i'
alias e="$EDITOR"
alias v="$VISUAL"
# shortcuts
alias cltmp='(rm -rf /tmp/* || true) && echo "TEMPORARY DIRECTORY CLEANED SUCCESSFULLY."'
alias des='cd ~/Desktop'
alias ctmp='cd $(mktemp -d)'
alias cx='chmod +x'
alias cown='sudo chown -R $USER:USER'
alias gi='grep -i'
# ls commands
alias ls="ls --color"
alias ll="ls -l"
alias ln="ln -v"
alias l='ls -l'
alias la='ls'
alias lla='ls -l'
alias lt='ls --tree'
alias ip='ip -c'
alias rm='rm -i'
# browsers
alias bop='python3 -mwebbrowser' # browser open: bop [url]
# rm commands
alias rmm="rm -rf"
# mkdir commands
alias mkdir="mkdir -p"
# Print all hostnames
alias hostname='hostname -A'
# Grant execution right to all .sh files inside the current directory recursively
alias rexec='find . -type f -iname "*.sh" -exec chmod +x {} \;'

# Static installers
# Kubernetes
alias install-kubens='mkdir -p ~/.local/bin/ && curl -L --silent https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens -o ~/.local/bin/kubens && chmod +x ~/.local/bin/kubens'
alias install-kubectx='mkdir -p ~/.local/bin/ && curl -L --silent https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx -o ~/.local/bin/kubectx && chmod +x ~/.local/bin/kubectx'
alias install-helm='curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash'
alias install-kubectl='mkdir -p ~/.local/bin/ && curl -L --silent "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" -o  ~/.local/bin/kubectl && chmod +x ~/.local/bin/kubectl'
alias install-kubeseal='mkdir -p ~/.local/bin/ && curl -L --silent https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.10.0/kubeseal-linux-amd64 -o ~/.local/bin/kubeseal && install -m 755 ~/.local/bin/kubeseal ~/.local/bin/kubeseal'
alias install-argocd='mkdir -p ~/.local/bin/ && curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o ~/.local/bin/argocd && chmod +x ~/.local/bin/argocd'

# Ansible
if command -v ansible &> /dev/null
then
    alias ansiblefacts='ansible localhost -m ansible.builtin.setup'
fi

# ls specifics
if command -v exa &> /dev/null
then
    alias ls='exa -a'
fi

if command -v argocd &> /dev/null
then
    alias argoshowapps='argocd --server-crt ${KUBECONFIG} --core app list'
fi

if command -v argocd-autopilot &> /dev/null
then
    alias argoap='argocd-autopilot'
    alias argoapp='argocd-autopilot project'
    alias argoapr='argocd-autopilot repo'
fi

if command -v zsh &> /dev/null
then
alias sz='source ~/.zshrc'
fi

if [ ! -d "$HOME/.local/bin" ]; then mkdir -p "$HOME/.local/bin"; fi
if [ ! -f "$HOME/.local/bin/ch" ]; then curl https://cht.sh/:cht.sh > "$HOME/.local/bin/ch" && chmod +x "$HOME/.local/bin/ch"; fi

# navi
if command -v navi &> /dev/null
then
alias navi="navi --fzf-overrides '--layout=reverse --with-nth 1,2 --border=rounded --margin 5% --padding 3%'"
alias nav="navi"
fi

if [ -x "$(command -v openssl)" ]; then 
alias convertopem="openssl x509 -inform der -in ca.cer -out ca.pem"; 
fi

# kitty
if [ -x "$(command -v kitty)" ]; then alias icat="kitty +kitten icat"; fi

# Dos2unix recursive
if [ -x "$(command -v dos2unix)" ]; then alias d2u='find . -type f -print0 | xargs -0 dos2unix'; fi

# Ranger
if [ -x "$(command -v ranger)" ]; then alias r='ranger .'; fi

# Minikube
if [ -x "$(command -v minikube)" ]; then alias minikuberestart="minikube delete && minikube start"; fi

# Open atom in the current directory
if [ -x "$(command -v atom)" ]; then alias a='atom .'; fi

# peek recorder
if [ -x "$(command -v peek)" ]; then alias peek='peek --display=$DISPLAY &'; fi

# Python3
if command -v python3 &> /dev/null
then
alias p3='python3'
fi

# Python3
if command -v xclip &> /dev/null
then
alias caty='xclip -sel c <' # copy cotent of the file in clipboard, ex : caty input.txt
fi

# Restart vmtool service
alias rvm='sudo systemctl restart vmtoolsd.service'

# Mullvad
if command -v openvpn &> /dev/null
then
alias mullvad='sudo openvpn --config'
alias mulvad='sudo openvpn --config'
alias mulv='sudo openvpn --config'
alias muvad='sudo openvpn --config'
fi

if command -v gp-saml-gui &> /dev/null
then
alias gpvpn='gp-saml-gui --clientos Windows --gateway --no-verify'
fi

if command -v kb &> /dev/null
then
alias kbl="kb list"
alias kbe="kb edit"
alias kba="kb add"
alias kbv="kb view"
alias kbd="kb delete --id"
alias kbg="kb grep"
alias kbt="kb list --tags"
fi

# Vagrant
if command -v vagrant &> /dev/null
then
alias va='vagrant'
alias vadf='vagrant destroy -f'
alias vau='vagrant up'
alias vaup='vagrant up --provision'
fi

# GIT ##################################################################################################################
function ggl {
if [ -z "$1" ]; then
  echo "Get the latest version of a github project in a string format by specifying the repo owner and the repo name."
  echo "Usage: ggl username/reponame"
else
  echo $(curl -L -s "https://api.github.com/repos/$1/releases/latest" | grep -Poe '"tag_name": "\K.*?(?=")' | head -n 1)
fi
}

if command -v git &> /dev/null
then
alias cg='cd `git rev-parse --show-toplevel`'
alias gst='git status'
alias gitremote='git config --get remote.origin.url'
alias gsr='cd `git rev-parse --show-toplevel` && git checkout master && git pull'
fi
#######################################################################################################################

if command -v htpasswd &> /dev/null
then
alias cryptpass='echo $(htpasswd -bnBC 10 \"\" $CRYPTPASS | tr -d ":\n")'
fi

# Docker
if command -v docker &> /dev/null
then
alias dr='docker run -it '
alias dok='docker'
alias dokb='docker build'
alias dokr='docker run'
alias doklia='docker image ls --all'
alias dormi='docker rmi -f $(docker images -a -q)'
alias dormc='docker rm -vf $(docker ps -a -q)'
alias dora='docker system prune -f || true && docker rm -vf $(docker ps -a -q) || true && docker rmi -f $(docker images -a -q) || true &&  docker system prune -f || true'

# Docker tools
alias dokube='docker run -it -v "$(pwd)/:/root/rke/" silentreatmen7/dock-kube:latest'
fi

if command -v urxvt &> /dev/null
then
alias rxvt-unicode='urxvt'
fi

if command -v tmux &> /dev/null
then
alias tm='tmux'
fi

if command -v flux &> /dev/null
then
alias frh='flux reconcile helmrelease'
alias frs='flux reconcile source'
alias frk='flux reconcile kustomization'
alias frall='flux reconcile source git flux-system && flux reconcile kustomization flux-system applications core --with-source'
alias fgall='flux get all'
alias flog='flux logs'
fi

if command -v helm &> /dev/null
then

alias helmdry='helm install --generate-name --dry-run --debug --values'
alias helmcleandry='for p in $(find . -type f -name "*values.yaml" | sed -r "s|/[^/]+$$||" | sort | uniq); do echo rm -rf $(pwd)/charts/$(basename $(dirname $(realpath "$p")))/Chart.lock $(pwd)/charts/$(basename $(dirname $(realpath "$p")))/charts/; done
'
alias helmbuildry='for p in $(find $(pwd) -type f -name "*Chart.yaml*" | sed -r "s|/[^/]+$$||" | sort | uniq); do echo helm dep build $(dirname $(realpath "$p")); done'
alias helmdepdry='for p in $(find $(pwd) -type f -name "*Chart.yaml*" | sed -r "s|/[^/]+$$||" | sort | uniq); do echo helm dep up $(dirname $(realpath "$p")); done'
alias helmpackagedry='for p in $(find $(pwd) -type f -name "*Chart.yaml*" | sed -r "s|/[^/]+$$||" | sort | uniq); do echo helm package $(dirname $(realpath "$p")) --destination $(pwd)/releases/; done'
alias helmclean='for p in $(find . -type f -name "*values.yaml" | sed -r "s|/[^/]+$$||" | sort | uniq); do rm -rf $(pwd)/charts/$(basename $(dirname $(realpath "$p")))/Chart.lock $(pwd)/charts/$(basename $(dirname $(realpath "$p")))/charts/; done
'
alias helmbuild='for p in $(find $(pwd) -type f -name "*Chart.yaml*" | sed -r "s|/[^/]+$$||" | sort | uniq); do helm dep build $(dirname $(realpath "$p")); done'
alias helmpackage='for p in $(find $(pwd) -type f -name "*Chart.yaml*" | sed -r "s|/[^/]+$$||" | sort | uniq); do helm package $(dirname $(realpath "$p")) --destination $(pwd)/releases/; done'
alias helmdep='for p in $(find $(pwd) -type f -name "*Chart.yaml*" | sed -r "s|/[^/]+$$||" | sort | uniq); do helm dep up $(dirname $(realpath "$p")); done'
fi

if command -v kubectl &> /dev/null
then

alias kkk='kubectl config view --minify'
alias kwatch='watch kubectl get pods -A'
alias kns='kubens'
alias k='kubectl'
alias kconf='export KUBECONFIG=$(pwd)/kube_config_cluster.yml'
alias kconfall='export KUBECONFIG= && for kubeconfigFile in `find "$(pwd)" -type f -name "*.yaml" -o -name "kube*config*"` do; export KUBECONFIG="$kubeconfigFile:$KUBECONFIG" done;'
alias kconfi='mkdir $HOME/.kube && cp $(pwd)/kube_config_cluster.yml $HOME/.kube/config --backup=t && export KUBECONFIG=$HOME/.kube/config'
alias kgsf='kubectl get -o wide statefulset'
# print kubernetes cluster info
alias kclinfo='kubectl cluster-info'
# print kubernetes cluster info verbose
alias kclview='kubectl config view'
# print the whole cluster log dump
alias kcldebug='kubectl cluster-info dump'

alias kgseaa='kubectl get serviceaccount -A'
alias kgsea='kubectl get serviceaccount -A'
alias kdseaa='kubectl describe serviceaccount -A'
alias kdsea='kubectl describe serviceaccount'

alias kdelaps='kubectl delete applicationset'
alias kdaps='kubectl describe applicationset'
alias kdapsa='kubectl describe applicationset -A'
alias kgaps='kubectl get applicationset'
alias kgapsa='kubectl get applicationset -A'

alias kgdep='kubectl get deploy'
alias kddep='kubectl describe deploy'
alias kdepa='kubectl describe deploy -A'
alias kgdepa='kubectl get deploy -A'
alias kdeldep='kubectl delete deploy'

alias kgapp='kubectl get application'
alias kdapp='kubectl describe application'
alias kdappa='kubectl describe application -A'
alias kgappa='kubectl get application -A'
alias kdelapp='kubectl delete application'

alias kdry='kubectl --dry-run=client -o yaml apply -f'

alias kgsec='kubectl get -o wide secret'
alias kgseca='kubectl get -o wide secret -A'
alias kgs='kubectl get -o wide service'
alias kgsc='kubectl get -o wide storageclass'
alias kgea='kubectl get -o wide events -A'
alias kgeall='kubectl get -o wide events -A'
alias kge='kubectl get -o wide events'
alias kgpva='kubectl get -o wide pv -A'
alias kgpvca='kubectl get -o wide pvc -A'
alias kgsca='kubectl get -o wide storageclass -A'
alias kgss='kubectl get -o wide sealedsecret -A'
alias kdss='kubectl describe sealedsecret -A'
alias kggr='kubectl get -o wide gitrepository -A'
alias kdgr='kubectl describe gitrepository -A'
alias kghc='kubectl get -o wide helmcharts -A'
alias kdhc='kubectl describe helmcharts -A'
alias kghrl='kubectl get -o wide helmrelease -A'
alias kdhrl='kubectl describe helmrelease -A'
alias kghr='kubectl get -o wide helmrepository -A'
alias kdhr='kubectl describe helmrepository -A'
alias kgir='kubectl get -o wide imagerepository -A'
alias kdir='kubectl describe imagerepository -A'
alias kdel='kubectl delete'
alias kdia='kubectl describe ingress -A'
alias kginr='kubectl get -o wide ingressroute -A'
alias kdinr='kubectl describe ingressroute -A'
alias kgic='kubectl get -o wide ingressclass -A'
alias kdic='kubectl describe ingressclass -A'
alias kdelp='kubectl delete pod'
alias kdelns='kubectl delete namespace'
alias kdelsf='kubectl delete statefulset'
alias kgpa='kubectl get pod -o wide -A'
alias kgsa='kubectl get -o wide service -A'
alias kgnsa='kubectl get -o wide ns -A'
alias kgdep='kubectl get -o wide deploy'
alias kgda='kubectl get -o wide deploy -A'
alias kgia='kubectl get -o wide ingress -A'
alias kgca='kubectl get -o wide cert -A'
alias kdp='kubectl describe pods'
alias kdsf='kubectl describe statefulset'
alias kdd='kubectl describe deploy'
alias kds='kubectl describe service'
alias kdsa='kubectl describe service -A'
alias kdns='kubectl describe namespace'
alias kdi='kubectl describe ingress'
alias kx='kubectx'
alias kkr='kubectl krew'
alias ksys='kubectl --namespace=kube-system'
alias kin='kubectl ingress-nginx'
alias kga='kubectl get -o wide all'
alias kgall='kubectl get -o wide all -A'
alias kak='kubectl apply -k'
alias kps='kubectl patch svc'
alias kk='kubectl kustomize'
alias kdeldep='kubectl delete deployment'
alias kex='kubectl exec -i -t'
alias kl='kubectl logs'
alias klop='kubectl logs -f -p'
alias kp='kubectl proxy'
alias kpf='kubectl port-forward'
alias kpfargo='echo "go at: http://127.0.0.1:8080" && kubectl port-forward -n argocd svc/argocd-server 8080:80'
alias kpfargocd='echo "go at: http://127.0.0.1:8080" && kubectl port-forward -n argocd svc/argo-cd-argocd-server 8080:80'
alias kg='kubectl get -o wide'
alias kd='kubectl describe'
alias krm='kubectl delete'
alias kgpo='kubectl get -o wide pods'
alias kdpo='kubectl describe pods'
alias kgno='kubectl get -o wide nodes'
alias kgna='kubectl get -o wide nodes -A'
alias kdno='kubectl describe nodes'
alias kdnoa='kubectl describe nodes -A'
alias kgns='kubectl get -o wide namespaces'
alias kdns='kubectl describe namespaces'
alias kglb='kubectl get -o wide --show-labels'
alias kwnsa='kubectl get -o wide --all-namespaces --watch'
alias kexn='kubectl exec -i -t --namespace'
alias klon='kubectl logs -f --namespace'
alias kpfn='kubectl port-forward --namespace'
alias kgn='kubectl get -o wide --namespace'
alias kdn='kubectl describe --namespace'
alias kgsecn='kubectl get -o wide secret --namespace'
alias kdsecn='kubectl describe secret --namespace'
alias kall='kubectl get -o wide -o=wide -A'
alias kw='kubectl get -o wide --watch --namespace'
alias knot='kubectl node top'
alias kdu='kubectl describe user'
alias kdua='kubectl describe user -A'
alias kgu='kubectl get -o wide user'
alias kdvo='kubectl describe vhost'
alias kgvo='kubectl get -o wide vhost'
alias kgvoa='kubectl get -o wide vhost -A'
alias kgperm='kubectl get -o wide Permission'
alias kgperma='kubectl get -o wide Permission -A'
alias kgnp='kubectl get -o wide NetworkPolicy'
alias kgnpa='kubectl get -o wide NetworkPolicy -A'
alias kgpol='kubectl get -o wide Policy'
alias kdpol='kubectl describe Policy'
alias kdpola='kubectl describe Policy -A'
alias kgpola='kubectl get -o wide Policy -A'
alias kdvoa='kubectl describe vhost -A'
alias kgpv='kubectl get -o wide pv'
alias kgpva='kubectl get -o wide pv -A'
alias kgpvc='kubectl get -o wide pvc'
alias kgpvca='kubectl get -o wide pvc -A'
alias kdpvc='kubectl describe pvc'
alias kdpvca='kubectl describe pvc -A'
alias kgua='kubectl get -o wide user -A'
alias kgep='kubectl get -o wide endpoints'
alias kgepa='kubectl get -o wide endpoints -A'
alias kdep='kubectl describe endpoints'
alias kdepa='kubectl describe endpoints -A'
alias kgser='kubectl get -o wide service'
alias kgsera='kubectl get -o wide service -A'
alias kdser='kubectl describe service'
alias kdsera='kubectl describe service -A'
alias kdc='kubectl describe cert'
alias kdca='kubectl describe cert -A'
alias kgcm='kubectl get -o wide configmap'
alias kgcma='kubectl get -o wide configmap -A'
alias kdcm='kubectl describe configmap'
alias kdcma='kubectl describe configmap -A'
alias kgcia='kubectl get -o wide ClusterIssuer -A'
alias kgci='kubectl get -o wide ClusterIssuer'
alias kdcia='kubectl describe ClusterIssuer -A'
alias kdci='kubectl describe ClusterIssuer'
alias kgexa='kubectl get -o wide exchange -A'
alias kgex='kubectl get -o wide exchange'
alias kdexa='kubectl describe exchange -A'
alias kdex='kubectl describe exchange'
alias kgcc='kubectl config current-context'
fi
